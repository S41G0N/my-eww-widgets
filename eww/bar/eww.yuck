;; ######################################### VARIABLES ##############################################
(deflisten get_layout "scripts/layout --get-layout")
(deflisten workspaces_list :initial "[]" "scripts/get-workspaces")
(deflisten current_workspace :initial "[]" "scripts/get-active-workspace")
(deflisten volume_vol "scripts/audio --get-vol")
(deflisten microphone_vol "scripts/audio --get-mic")
(deflisten brightness "scripts/brightness")

(defpoll time_tmp :interval "20s" `date +" %a %d %b %R"`)

(defpoll volume_icon :interval "2s" "scripts/audio --get-volicon")
(defpoll microphone_icon :interval "2s" "scripts/audio --get-micicon")

(defpoll hour :interval "1s" "scripts/time_info --hour")
(defpoll minutes :interval "1s" "scripts/time_info --minutes")
(defpoll type :interval "1s" "scripts/time_info --type")
(defpoll date :interval "1s" "scripts/time_info --date")

(defvar date_reveal false)
(defvar settings_wheel "âš™")
(defvar settings_reveal false)
(defvar day "0")
(defvar month "0")
(defvar year "0")

(defvar eww "eww -c $HOME/.config/eww/bar")
(defvar show "true")

(defpoll wifi_status :interval "1s" "scripts/network")



;; ################################################ WIDGETS ##########################################
;; WIFI WIDGET
(defwidget wifi []
  (box :orientation "h" :class "margin-separate" :space-evenly "false" :visible show
    (button :onclick "iwgtk" :timeout "10s" 
      (image :path "icons/wifi_${wifi_status == 'DISCONNECTED' ? "red" : "green"}.png" :image-width "18"))
    (label :markup "<span font-size=\"small\" font-weight=\"light\">${wifi_status}</span>")))

          
;; WORKSPACE TRACKER
(defwidget workspaces []
  (box :class "workspaces" 
    (label :text "${workspaces_list} ${current_workspace}" :visible false)
    (for workspace in workspaces_list
      (button :onclick "hyprctl dispatch workspace ${workspace.id}" 
        (box :class "default-workspace 
           ${workspace.id == current_workspace[0] ? "firstScreen" : ""} 
           ${workspace.id == current_workspace[1] ? "secondScreen" : ""} 
           ${workspace.id == current_workspace[2] ? "thirdScreen" : ""} 
           ${workspace.id == current_workspace[3] ? "fourthScreen" : ""} 
           ${workspace.windows > 0 ? "occupiedWindow" : ""}"
           (label :text "${workspace.id}"))))))

;; TIME WIDGET
(defwidget time []
  (eventbox
    :onhover "${eww} update date_reveal=true"
    :onhoverlost "${eww} update date_reveal=false"
    (button
      :onclick "scripts/popup_windows --calendar"
      (box
        :class "time_box"
        :space-evenly "false"
        :orientation "h"
        :valign "center"
        :halign "fill"
        (label 
          :valign "center"
          :class "time"
          :markup "<span font-weight=\"heavy\">${hour}</span><span font-weight=\"heavy\">:${minutes}</span><span font-size=\"xx-small\">${type}</span>")
        (revealer
          :reveal date_reveal
          :transition "slideright"
          :duration "350ms"
          :valign "fill"
          (label
            :valign "fill"
            :class "date"
            :markup "<span font-weight=\"light\" font-size=\"small\">${date}</span>"))))))

;; POPUP CALENDAR
(defwidget popup_calendar []
  (box
    :class "popup-window"
    :orientation "h"
    :valign "fill"
    :halign "fill"
    (calendar
      :day day
      :month month
      :year year
      :show-details "true"
      :show-heading "true"
      :show-day-names "true")))

(defwidget popup_power_management []
  (box :class "popup-window"
    :orientation "v"
    (button :onclick "system76-power profile battery" (label :text "Battery"))
    (button :onclick "system76-power profile balanced"(label :text "Balanced"))
    (button :onclick "system76-power profile performance"(label :text "Performance"))))

;; PROGRESS BAR TEMPLATE
(defwidget progress_scale [label value onchange ?action]
  (box :orientation "h" :class "trackerMetric" :space-evenly false
    (button :class "trackerIcons" :onclick action label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

;; PROGRESS CIRCLE TEMPLATE
(defwidget progress_circle [?tooltip ?label ?class_inherit value] 
  (box :orientation "h" :class "circularMetric ${class_inherit}" :tooltip tooltip
    (label :class "trackerIcons" :text label)
    (circular-progress 
      :start-at 50
      :value value
      :thickness 3)))

;; ADJUSTABLE SETTINGS
(defwidget adjustables []
  (box :space-evenly false
    (progress_scale
      :label microphone_icon
      :value microphone_vol
      :onchange "scripts/audio --set-mic {}"
      :action "scripts/audio --toggle-mic")
    (progress_scale
      :label volume_icon
      :value volume_vol
      :onchange "scripts/audio --set-vol {}"
      :action "scripts/audio --toggle-vol")
    (progress_scale
      :label "ðŸ”†"
      :value brightness
      :onchange "scripts/brightness --set-bright {}"
      :action "asusctl -n")
      (button :onclick "scripts/layout --switch-layout" :timeout "10s" 
        (label :text "âŒ¨"))
      (label :markup "<span font-size=\"small\" font-weight=\"light\">${get_layout}</span>")))

;; TRACKERS WIDGET
(defwidget trackers []
  (box :class "circularMetric" :visible show
    (progress_circle :label "ðŸ’¾" :value {EWW_RAM.used_mem_perc})
    (progress_circle :label "ðŸ’»" :value {EWW_DISK["/"].used_perc})
    (revealer :reveal {EWW_BATTERY.BAT0.capacity != '' ? true : false} :valign "fill" :transition "slideright"
    (button :onclick "scripts/popup_windows --power-manager"
      (progress_circle :label "ðŸ”‹" :class_inherit {EWW_BATTERY.BAT0.status} :value {EWW_BATTERY.BAT0.capacity} :tooltip "${EWW_BATTERY.BAT0.capacity}%")))))

;; ADJUSTABLE SETTINGS
(defwidget settings []
  (eventbox
    :onhover "${eww} update settings_reveal=true && ${eww} update settings_wheel='âš™ ' && ${eww} update show='false'"
    :onhoverlost "${eww} update settings_reveal=false && ${eww} update settings_wheel='âš™' && ${eww} update show='true'"
    (box
      :class "time_box"
      :space-evenly "false"
      :orientation "h"
      :halign "fill"
      (label :valign "center" 
        :class "fontLarge" 
        :visible true
        :text "${settings_wheel}")
      (revealer
        :reveal settings_reveal
        :transition "slideright"
        :duration "450ms"
        :valign "fill"
        (adjustables)))))

;; FINAL BAR CONTAINER
(defwidget full_bar []
  (centerbox :class "main-container" :orientation "h" :halign "true"
  (box :halign "start"  (workspaces))
    (box :halign "center" (time))
    (box :halign "end" :space-evenly false
    (wifi)
    (trackers)
    (settings))))



;; ########################################## WINDOWS #################################################
;; BAR WINDOW
(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :anchor "top center" :y 7 :hexpand true :halign true :width "60%")
  :exclusive true
  ;:reserve (struts :side "top" :distance "70px")
  :stacking "fg"
  :wm-ignore false
  (full_bar))

;; CALENDAR WINDOW
(defwindow calendar
  :monitor 0
  ;NEEDS TO BE SET DYNAMIC
  :geometry (geometry :x 490 :y 10 :width 300 :height 100)
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore "false"
  (popup_calendar))

;; POWER MANAGEMENT WINDOW
(defwindow powerManager
  :monitor 0
  :geometry (geometry :x 910 :y 10 :width 140 :height 100)
  :stacking "fg"
  :windowtype "normal"
  :wm-ignore "false"
  (popup_power_management))
