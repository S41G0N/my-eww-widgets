;; ######################################### VARIABLES ##############################################
(deflisten get_layout "scripts/layout --get-layout")
(deflisten workspaces_list :initial "[]" "scripts/get_workspaces")
(deflisten current_workspace :initial "[]" "scripts/current_workspace")
(deflisten volume_vol "scripts/audio --get-vol")
(deflisten microphone_vol "scripts/audio --get-mic")
(deflisten brightness "scripts/brightness")
(defpoll ip_address :interval "20s" "ip addr show | awk '/inet / {print $2}' | cut -d/ -f1 | tail -n1")

(defpoll time_tmp :interval "20s" `date +" %a %d %b %R"`)
(defpoll power_mode :interval "1s" `system76-power profile | grep 'Power Profile' | awk -F': ' '{print $2}' | xargs`)
(defpoll volume_icon :interval "2s" "scripts/audio --get-volicon")
(defpoll microphone_icon :interval "2s" "scripts/audio --get-micicon")
(defpoll charge_limit :interval "1s" "cat /sys/class/power_supply/BAT0/charge_control_end_threshold")
(defpoll hour :interval "1s" "scripts/time_info --hour")
(defpoll minutes :interval "1s" "scripts/time_info --minutes")
(defpoll type :interval "1s" "scripts/time_info --type")
(defpoll date :interval "1s" "scripts/time_info --date")
(defpoll wifi_status :interval "1s" "scripts/network")
(defpoll active_window_title :interval "0.1s" "hyprctl activeworkspace -j | jq -r '.lastwindowtitle' | awk -F ' - ' '{print $NF}'")
(defvar selected_window_title "")

(defvar show_active_window true)
(defvar show_selected_window false)

(defvar show_battery false)
(defvar show_disk_space false)
(defvar show_ram false)
(defvar show_date false)
(defvar show_settings false)
(defvar show_network true)
(defvar show_ip false)
(defvar show true)
(defvar settings_wheel "âš™")
(defvar day "0")
(defvar month "0")
(defvar year "0")

(defvar cycle_kbd_brightness "asusctl -n")
(defvar switch_layout "scripts/layout --switch-layout")
(defvar toggle_window "python scripts/popup_windows.py")
(defvar power_profile "system76-power profile")
(defvar eww "eww -c $HOME/.config/eww/bar")
(defvar launch "scripts/launch_app")

;; ################################################ WIDGETS ##########################################
;; WIFI WIDGET
(defwidget wifi []
    (eventbox 
      :visible show 
      :onhover "${eww} update show_ip=true show_network=false"
      :onhoverlost "${eww} update show_ip=false show_network=true"
      (box :space-evenly false :class "margin-separate"
        (button :onclick "${launch} iwgtk"
          (image :path "icons/wifi_${wifi_status == 'DISCONNECTED' ? "red" : "green"}.png" :image-width "18"))
        (revealer
          :reveal show_network
          :transition "slideleft"
          :duration "350ms"
          :valign "fill"
          (label 
            :truncate true 
            :limit-width 16
            :markup "<span font-size=\"x-small\" font-weight=\"light\">${wifi_status}</span>"))
        (revealer
          :reveal show_ip
          :transition "slideright"
          :duration "350ms"
          :valign "center"
          (label 
            :truncate true
            :limit-width 16
            :markup "<span font-size=\"x-small\" font-weight=\"light\">${ip_address}</span>")))))

;; WORKSPACE TRACKER
(defwidget workspaces []
  (box :class "workspaces" 
    (label :text "${current_workspace}" :visible false)
    (for workspace in workspaces_list
      (eventbox
        :onhover "${eww} update selected_window_title='${replace(workspace.windows[1],'&','&amp;')}'"
        (button :onclick "hyprctl dispatch workspace ${workspace.id}" 
          (box :class "default-workspace 
            ${workspace.id == current_workspace[0] ? "firstScreen" : ""} 
            ${workspace.id == current_workspace[1] ? "secondScreen" : ""} 
            ${workspace.id == current_workspace[2] ? "thirdScreen" : ""} 
            ${workspace.id == current_workspace[3] ? "fourthScreen" : ""} 
            ${workspace.windows[0] > 0 ? "occupiedWindow" : ""}"
            (label :text "${workspace.id}")))))))

(defwidget display_window_titles []
  (box 
    :class "current-window-title"
    (revealer :reveal show_selected_window :visible show_selected_window :valign "fill" :transition "slideleft"
      (label 
        :unindent true
        :truncate true
        :limit-width 1
        :markup "<span font-size=\"x-small\" font-weight=\"light\">${selected_window_title}</span>"))

    (revealer :reveal show_active_window :visible show_active_window :valign "fill" :transition "slideleft"
      (label 
        :unindent true
        :truncate true
        :limit-width 1
        :markup "<span font-size=\"x-small\" font-weight=\"light\">${active_window_title}</span>"))))

;; TIME WIDGET
(defwidget time []
  (eventbox
    :onhover "${eww} update show_date=true"
    :onhoverlost "${eww} update show_date=false"
    (button
      :onclick "${toggle_window} --calendar"
      (box
        :class "time_box"
        :space-evenly "false"
        :orientation "h"
        :valign "center"
        :halign "fill"
        (label
          :valign "center"
          :class "time"
          :markup "<span font-weight=\"heavy\">${hour}</span><span font-weight=\"heavy\">:${minutes}</span><span font-size=\"xx-small\">${type}</span>")
        (revealer
          :reveal show_date
          :transition "slideright"
          :duration "350ms"
          :valign "fill"
          (label
            :valign "fill"
            :class "date"
            :markup "<span font-weight=\"light\" font-size=\"small\">${date}</span>" ))))))

;; POPUP CALENDAR
(defwidget popup_calendar []
  (box
    :class "popup-window"
    :orientation "h"
    :valign "fill"
    :halign "fill"
    (calendar
      :day day
      :month month
      :year year
      :show-details "true"
      :show-heading "true"
      :show-day-names "true")))

(defwidget popup_power_management []
  (box :class "popup-window"
    :space-evenly false
    :orientation "v"
    (button :onclick "${power_profile} battery && ${toggle_window} --powerManager" (label :text "Battery"))
    (button :onclick "${power_profile} balanced && ${toggle_window} --powerManager"(label :text "Balanced"))
    (button :onclick "${power_profile} performance && ${toggle_window} --powerManager"(label :text "Performance"))
    (label :text "" :class "white-border")
    (label :text "Charge Limit:")
    (progress_scale
      :label "ðŸ”‹${charge_limit}%"
      :value charge_limit
      :onchange "asusctl -c {}"
      :min 20 )))

;; PROGRESS BAR TEMPLATE
(defwidget progress_scale [label ?value onchange ?action ?min ?right_click]
  (box :orientation "h" :class "trackerMetric" :space-evenly false :halign "center"
    (button :class "trackerIcons" :onrightclick right_click :onclick action label)
    (scale 
      :min {0 + min}
      :max 101
      :active {onchange != ""}
      :value value
      :onchange onchange)))

;; PROGRESS CIRCLE TEMPLATE
(defwidget progress_circle [?tooltip ?label ?class_inherit value]
  (box :orientation "h" :class "circularMetric ${class_inherit}" :tooltip tooltip
    (label :class "trackerIcons" :text label)
    (circular-progress
      :start-at 50
      :value value
      :thickness 3.6)))

;; ADJUSTABLE SETTINGS
(defwidget adjustables []
  (box :space-evenly false
    (progress_scale
      :label microphone_icon
      :value microphone_vol
      :onchange "scripts/audio --set-mic {}"
      :action "scripts/audio --toggle-mic"
      :right_click "${launch} helvum")
    (progress_scale
      :label volume_icon
      :value volume_vol
      :onchange "scripts/audio --set-vol {}"
      :action "scripts/audio --toggle-vol"
      :right_click "${launch} helvum")
    (progress_scale
      :label "ðŸ”†"
      :value brightness
      :onchange "scripts/brightness --set-bright {}"
      :action "asusctl -n")
      (button :onclick switch_layout :onrightclick cycle_kbd_brightness
        (label :text "âŒ¨"))
      (label :markup "<span font-size=\"small\" font-weight=\"light\">${get_layout}</span>")))

;; ADJUSTABLE SETTINGS
(defwidget workspace_trackers []
  (box 
    :space-evenly false
    (eventbox
      :onhover "${eww} update show_active_window=false show_selected_window=true"
      :onhoverlost "${eww} update show_active_window=true show_selected_window=false"
      (workspaces))
    (display_window_titles)))

;; TRACKERS WIDGET
(defwidget trackers []
  (box :class "circularMetric" :visible show :space-evenly false
    (eventbox
      :onhover "${eww} update show_ram=true"
      :onhoverlost "${eww} update show_ram=false"
        (box :space-evenly false
          (progress_circle 
            :label "ðŸ’¾" 
            :class_inherit "${EWW_RAM.used_mem_perc > 80 ? "high" : EWW_RAM.used_mem_perc > 50 ? "medium" : "low"}" 
            :value {EWW_RAM.used_mem_perc})
            (revealer :reveal show_ram :valign "fill" :transition "slideright" 
              (label :text "${round(EWW_RAM.used_mem_perc, 1)}%"))))

    (eventbox
      :onhover "${eww} update show_disk_space=true"
      :onhoverlost "${eww} update show_disk_space=false"
        (box :space-evenly false
          (progress_circle 
            :label "ðŸ’»" 
            :class_inherit "${EWW_DISK["/"].used_perc > 80 ? "high" : EWW_DISK["/"].used_perc > 50 ? "medium" : "low"}" 
            :value {EWW_DISK["/"].used_perc})
            (revealer :reveal show_disk_space :valign "fill" :transition "slideright" 
              (label :text "${round(EWW_DISK["/"].used_perc, 1)}%"))))

    (eventbox
      :onhover "${eww} update show_battery=true"
      :onhoverlost "${eww} update show_battery=false"
        (revealer :reveal {EWW_BATTERY.BAT0.capacity != '' ? true : false} :valign "fill" :transition "slideright"
          (button :onclick "${toggle_window} --powerManager"
            (box :space-evenly false
              (progress_circle 
                :label "ðŸ”‹" 
                :class_inherit "${power_mode} ${EWW_BATTERY.BAT0.status}" 
                :value {EWW_BATTERY.BAT0.capacity})
                (revealer :reveal show_battery :valign "fill" :transition "slideright" 
                  (label :text "${EWW_BATTERY.BAT0.capacity}%"))))))))

;; ADJUSTABLE SETTINGS
(defwidget settings []
  (eventbox
    :onhover "${eww} update show_settings=true settings_wheel='âš™ ' show=false"
    :onhoverlost "${eww} update show_settings=false settings_wheel='âš™' show=true"
    (box
      :class "time_box"
      :space-evenly "false"
      :orientation "h"
      :halign "fill"
      (label :valign "center"
        :class "fontLarge"
        :visible true
        :text "${settings_wheel}")
      (revealer
        :reveal show_settings
        :transition "slideright"
        :duration "450ms"
        :valign "fill"
        (adjustables)))))

;; FINAL BAR CONTAINER
(defwidget full_bar []
  (centerbox :class "main-container" :orientation "h" :halign "true"
  (box :halign "start"  (workspace_trackers))
  (box :halign "center" (time))
  (box :halign "end" :space-evenly false
  (wifi)
  (trackers)
  (settings))))

;; ########################################## WINDOWS #################################################
;; BAR WINDOW
(defwindow mainbar [width]
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :anchor "top center" :y 7 :hexpand true :halign true :width {width})
  :exclusive true
  :stacking "fg"
  :wm-ignore false
  (full_bar))

;; CALENDAR WINDOW
(defwindow calendar
  :monitor 0
  :geometry (geometry :anchor "top center" :y 10 :width 300 :height 100 )
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore "false"
  (popup_calendar))

;; POWER MANAGEMENT WINDOW
(defwindow powerManager [x_cor ?width]
  :monitor 0
  :geometry (geometry :x {x_cor} :y 10 :width {width} :height 100)
  :stacking "fg"
  :windowtype "normal"
  :wm-ignore "false"
  (popup_power_management))
